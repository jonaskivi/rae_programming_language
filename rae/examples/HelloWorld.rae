module rae.examples.HelloWorld

class Tester
{
pub:

	func log_me
	{
		log_s("Hello ")
	}
	
	int data = 2
}

class HelloWorld
{
pub:

	//constructor:
	func init
	{
	}
	
	//destructor:
	func free
	{
	}
	
	func log_int_array (ref[int] someints) let
	{
		// foreach loop
		loop( int a_num in someints )
		{
			log("foreach: ", a_num)
		}

		// for loop
		loop( uint i = 0; i < someints.size; ++i )
		{
			log("for: ", someints[i])
		}
	}

	pub func
	()say_hello()
	{
		[int] my_numbers
		my_numbers.emplace_back(1) // TODO rename emplace_back(1) to create(1)
		my_numbers.emplace_back(2)
		my_numbers.emplace_back(3)
		my_numbers.emplace_back(4)
		my_numbers.emplace_back(5)
		my_numbers.emplace_back(6)
		my_numbers.emplace_back(7)
		my_numbers.emplace_back(129874234985)
		
		//TODO NEXT log_int_array(my_numbers)
		
		loop( int a_num in my_numbers )
		{
			log(a_num)
		}
		
		/*
		loop( uint i = 0, i < my_numbers.size, ++i )
		{
			log(i, "= ", my_numbers[i])
		}
		*/
		
		tester.log_me
		log("World!")
	}
	
	func (int result) int_count (let int param1, let int param2) pub
	{
		return param1 + param2
	}

	func (val Tester) tester_count (let ref Tester param1, let ref Tester param2) pub
	{
		//return param1.data + param2.data
		//return param1 // TODO convert let ref to val by making a copy!
		return tester
	}

	func (int result) count (let int param1, let ref Tester param2) pub
	{
		if(param2 is null) //TODO oneliner if handling:
			return 0

		if(param1 > 0 )// TODO is not: and param2 is not null)
		{
			//log("whoa.")
		}

		if param1 > 0 // TODO no parentheses
		{
			//log("whoa.")
		}

		return param1 + param2.data
	}
	
	pub func (int) number { return m_number }
	pub func number (int set) { m_number = set }
	priv int m_number = 5 // default initializers are copied to constructors.
	

	let int let_init_data = 42
	int no_init_data
	double no_init_datad

	priv int anotherNumber = 42
	float afloat = 248.52

	Tester tester // val is the default type
	opt Tester tester_opt // opt is the optional type. This one is allocated automatically.
	opt Tester tester_not -> null // need to specify that it is null, if you want it to be empty.
	link Tester tester_link // link is a pointer which can not allocate or free memory.
	// a non-owning pointer which is also automatically set to null 
	// when the pointed object is destroyed.
	ptr Tester tester_ptr // Don't use raw pointers unless interfacing with C.

	string name = "Hello Rae World"

	[string] names

	opt[int] opt_array_test
	ref[int] ref_array_test
	ptr[int] ptr_array_test
	//TODO link[int] link_array_test
	[int] array_test //std::vector<int>	
	[int, 5] static_array_test //std::array<int, 5>
	[val Tester] testers	
	[Tester] defaultTesters	
	[link Tester] tester_links	
	[opt Tester] tester_opts	
	[ref Tester] tester_refs
	[ptr Tester] tester_ptrs
}

func (int) main ([string] args)
{
	string hello_rae = "What? Hello Rae World"
	log(hello_rae)

	val HelloWorld hello; //semicolons are allowed, but not required.

	HelloWorld hello2 //val is default

	log(hello2.name)
	
	//Rae does not use = for pointing to an object. Instead use -> to point.
	//= operator will copy by value, so that the behaviour is consistent,
	//whether you're using pointers or values.
	link Tester tester_lnk
	tester_lnk -> hello.tester

	log("LINK saying hello:")
	tester_lnk.log_me()

	hello.say_hello()

	log_s("5 + 2 = ")

	log(hello.count( hello.number, hello.tester_opt )) // opt to ref
	log(hello.count( hello.number, hello.tester )) // val to ref
	log(hello.count( hello.number, tester_lnk )) // link to ref

	// Complex validation
	//NEXT: log(hello.count( hello.int_count( hello.number, (42 - 14) * 3), hello.tester_count(hello.tester, tester_lnk) ))
	// End complex validation

	hello.tester.data = 3

	hello.tester_opts.push_back( hello.tester_opt )

	hello.tester_links.emplace_back
	hello.tester_links[0] -> hello.tester
	log("LINK in an array saying hello: ")
	hello.tester_links[0].log_me()
	log("Ok. Said hello.")
	hello.tester_links[0].data = 8
	log("an eight = ", hello.tester_links[0].data );

	if true == 1  // parentheses also allowed.
	{
		log("true")
	}

	bool is_what = false
	bool is_other = true

	if is_what == true or is_other == true
	{
		log("false")
	}

	//hello.array_test[0]
	//log("arrays 9 + 2 = ", hello.count( hello.array_test[0], hello.tester_opts[0] ))

	return 0
}

