module rae.examples.HelloWorld

class Tester
{
public:

	func ()logMe()
	{
		log_s("Hello ")
	}
	
	int data = 2
}


class HelloWorld
{
public:

	//constructor:
	func ()init()
	{
	}
	
	//destructor:
	func ()free()
	{
	}
	
	public func
	()sayHello()
	{
		tester.logMe
		log("World!")
	}
	
	func (int result) count (int param1, ref Tester param2) public
	{
		return(param1 + param2.data)
	}
	
	int num = 5 //default initializers are copied to constructors.

	protected int anotherNumber = 42
	float afloat = 248.52

	val Tester tester //val is a value type

	opt Tester tester_opt //opt is the optional type. This one is allocated automatically.

	opt Tester tester_not = null //need to specify that it is null, if you want it to be empty.

	link Tester tester_link //link is a pointer which can not allocate or free memory.
	//a non-owning pointer which is also automatically set to null when the pointed object is destroyed.

	int what_if_im_removed = 1
}

func
(int) main (string[] args)
//TODO: (int) main ([string] args)
{
	val HelloWorld hello; //semicolons are allowed, but not required.
	
	//Rae does not use = for pointing to an object. Instead use -> to point.
	//= operator will copy by value, so that the behaviour is consistent,
	//whether you're using pointers or values.
	link Tester tester_lnk
	tester_lnk -> hello.tester

	log("LINK saying hello:")
	tester_lnk.logMe()

	hello.sayHello()

	log_s("5 + 2 = ")

	log(hello.count( hello.num, hello.tester_opt ))

	hello.tester.data = 3

	return(0)
}

