module rae.examples.HelloWorld

class Tester
{
public:

	func ()logMe()
	{
		log_s("Hello ")
	}
	
	int data = 2
}

class HelloWorld
{
public:

	//constructor:
	func ()init()
	{
	}
	
	//destructor:
	func ()free()
	{
	}
	
	public func
	()sayHello()
	{
		[int] my_numbers
		my_numbers.emplace_back(5)
		my_numbers.emplace_back(6)
		my_numbers.emplace_back(7)
		
		for(int a_num in my_numbers)
		{
			log(a_num)
		}
		
		for(uint i = 0; i < my_numbers.size; i++)
		{
			log(i, ": ", my_numbers[i])
		}
		
		tester.logMe
		log("World!")
	}
	
	func (int result) count (int param1, ref Tester param2) public
	{
		return(param1 + param2.data)
	}
	
	int num = 5 //default initializers are copied to constructors.
	int no_init_data
	double no_init_datad

	protected int anotherNumber = 42
	float afloat = 248.52

	Tester tester //val is the default type
	opt Tester tester_opt //opt is the optional type. This one is allocated automatically.
	opt Tester tester_not = null //need to specify that it is null, if you want it to be empty.
	link Tester tester_link //link is a pointer which can not allocate or free memory.
	//a non-owning pointer which is also automatically set to null when the pointed object is destroyed.
	ptr Tester tester_ptr

	string name = "Hello Rae World"

	[string] names

	[int] array_test //std::vector<int>	
	[int, 5] static_array_test //std::array<int, 5>
	[val Tester] testers	
	[Tester] defaultTesters	
	[link Tester] tester_links	
	[opt Tester] tester_opts	
	[ref Tester] tester_refs
	[ptr Tester] tester_ptrs
}

func
(int) main () //(string[] args)
//(int) main ([string] args)
{
	string helloRae = "What? Hello Rae World"
	log(helloRae)

	val HelloWorld hello; //semicolons are allowed, but not required.

	HelloWorld hello2 //val is default

	log(hello2.name)
	
	//Rae does not use = for pointing to an object. Instead use -> to point.
	//= operator will copy by value, so that the behaviour is consistent,
	//whether you're using pointers or values.
	link Tester tester_lnk
	tester_lnk -> hello.tester

	log("LINK saying hello:")
	tester_lnk.logMe()

	hello.sayHello()

	log_s("5 + 2 = ")

	log(hello.count( hello.num, hello.tester_opt ))

	hello.tester.data = 3

	hello.array_test.push_back(9)
	hello.array_test.push_back(7)
	hello.array_test.push_back(4)

	hello.tester_opts.push_back( hello.tester_opt )

	hello.tester_links.emplace_back
	hello.tester_links[0] -> hello.tester
	log("LINK in an array saying hello: ")
	hello.tester_links[0].logMe()
	log("Ok. Said hello.")
	hello.tester_links[0].data = 8
	log("an eight = ", hello.tester_links[0].data );

	hello.array_test[0]

	log("arrays 9 + 2 = ", hello.count( hello.array_test[0], hello.tester_opts[0] ))

	return(0)
}

